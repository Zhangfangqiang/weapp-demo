export default function(e){let{BufferAttribute:S,BufferGeometry:T,FileLoader:i,Float32BufferAttribute:b,Loader:r,LoaderUtils:l,Vector3:U}=e;var t=function(e){r.call(this,e)};t.prototype=Object.assign(Object.create(r.prototype),{constructor:t,load:function(e,r,t,a){var n=this;var o=new i(n.manager);o.setPath(n.path);o.setResponseType("arraybuffer");o.load(e,function(e){try{r(n.parse(e))}catch(e){if(a){a(e)}}},t,a)},parse:function(e){function r(e){var r,t,a,n;n=new DataView(e);t=32/8*3+32/8*3*3+16/8;a=n.getUint32(80,true);r=80+32/8+a*t;if(r===n.byteLength){return true}var o=[115,111,108,105,100];for(var i=0;i<5;i++){if(u(o,n,i))return false}return true}function u(e,r,t){for(var a=0,n=e.length;a<n;a++){if(e[a]!==r.getUint8(t+a,false))return false}return true}function t(e){var r=new DataView(e);var t=r.getUint32(80,true);var a,n,o,i=false,u;var l,f,v,s;for(var g=0;g<80-10;g++){if(r.getUint32(g,false)==1129270351&&r.getUint8(g+4)==82&&r.getUint8(g+5)==61){i=true;u=new Float32Array(t*3*3);l=r.getUint8(g+6)/255;f=r.getUint8(g+7)/255;v=r.getUint8(g+8)/255;s=r.getUint8(g+9)/255}}var c=84;var d=12*4+2;var h=new T;var p=new Float32Array(t*3*3);var w=new Float32Array(t*3*3);for(var F=0;F<t;F++){var y=c+F*d;var x=r.getFloat32(y,true);var b=r.getFloat32(y+4,true);var U=r.getFloat32(y+8,true);if(i){var A=r.getUint16(y+48,true);if((A&32768)===0){a=(A&31)/31;n=(A>>5&31)/31;o=(A>>10&31)/31}else{a=l;n=f;o=v}}for(var m=1;m<=3;m++){var L=y+m*12;var E=F*3*3+(m-1)*3;p[E]=r.getFloat32(L,true);p[E+1]=r.getFloat32(L+4,true);p[E+2]=r.getFloat32(L+8,true);w[E]=x;w[E+1]=b;w[E+2]=U;if(i){u[E]=a;u[E+1]=n;u[E+2]=o}}}h.addAttribute("position",new S(p,3));h.addAttribute("normal",new S(w,3));if(i){h.addAttribute("color",new S(u,3));h.hasColors=true;h.alpha=s}return h}function a(e){var r=new T;var t=/solid([\s\S]*?)endsolid/g;var a=/facet([\s\S]*?)endfacet/g;var n=0;var o=/[\s]+([+-]?(?:\d*)(?:\.\d*)?(?:[eE][+-]?\d+)?)/.source;var i=new RegExp("vertex"+o+o+o,"g");var u=new RegExp("normal"+o+o+o,"g");var l=[];var f=[];var v=new U;var s;var g=[];var c=0;var d=0;var h=0;while((s=t.exec(e))!==null){d=h;var p=s[0];while((s=a.exec(p))!==null){var w=0;var F=0;var y=s[0];while((s=u.exec(y))!==null){v.x=parseFloat(s[1]);v.y=parseFloat(s[2]);v.z=parseFloat(s[3]);F++}while((s=i.exec(y))!==null){l.push(parseFloat(s[1]),parseFloat(s[2]),parseFloat(s[3]));f.push(v.x,v.y,v.z);w++;h++}if(F!==1){console.error("THREE.STLLoader: Something isn't right with the normal of face number "+n)}if(w!==3){console.error("THREE.STLLoader: Something isn't right with the vertices of face number "+n)}n++}g.push({startVertex:d,endVertex:h});c++}r.addAttribute("position",new b(l,3));r.addAttribute("normal",new b(f,3));if(c>0){for(var x=0;x<g.length;x++){r.addGroup(g[x].startVertex,g[x].endVertex,x)}}return r}function n(e){if(typeof e!=="string"){return l.decodeText(new Uint8Array(e))}return e}function o(e){if(typeof e==="string"){var r=new Uint8Array(e.length);for(var t=0;t<e.length;t++){r[t]=e.charCodeAt(t)&255}return r.buffer||r}else{return e}}var i=o(e);return r(i)?t(i):a(n(e))}});return{STLLoader:t}}