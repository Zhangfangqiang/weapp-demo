<!-- 不绑定事件开始 -->
<view class="page-section">
  <view class="page-section-title">
    <text>纵向滚动</text>
  </view>
  <view class="page-section-spacing">
    <scroll-view scroll-y style="height: 300rpx;">
      <view id="demo1" class="scroll-view-item demo-text-1"></view>
      <view id="demo2" class="scroll-view-item demo-text-2"></view>
      <view id="demo3" class="scroll-view-item demo-text-3"></view>
    </scroll-view>
  </view>
</view>

<view class="page-section">
  <view class="page-section-title">
    <text>横向滚动</text>
  </view>
  <view class="page-section-spacing">
    <scroll-view class="scroll-view_H" scroll-x style="width: 100%">
      <view id="demo1" class="scroll-view-item_H demo-text-1"></view>
      <view id="demo2" class="scroll-view-item_H demo-text-2"></view>
      <view id="demo3" class="scroll-view-item_H demo-text-3"></view>
    </scroll-view>
  </view>
</view>

<view class="page-section">
	<view class="page-section-title">
		<text>双向滚动</text>
	</view>
	<view class="page-section-spacing">
		<scroll-view bindscroll="onScroll" class="scroll-view_H" scroll-x scroll-y style="width: 100%;height:150rpx;">
			<view id="demo1" style="  background-image: linear-gradient(yellow, #9198e5)" class="scroll-view-item_H demo-text-1"></view>
			<view id="demo2" style="  background-image: linear-gradient(green, #9198e5)" class="scroll-view-item_H demo-text-2"></view>
			<view id="demo3" style="  background-image: linear-gradient(red, #9198e5)" class="scroll-view-item_H demo-text-3"></view>
		</scroll-view>
	</view>
</view>
<!-- 不绑定事件结束 -->

<!-- 绑定事件开始 -->
<view class="page-section">
	<view class="page-section-title">
		<text>片12 bindscrolltoupper 滚动到顶部/左边时触发</text>
	</view>
	<view class="page-section-spacing">
		<scroll-view upper-threshold="50" bindscrolltoupper="viewScrollToUpperEvent" scroll-y style="height: 300rpx">
			<view id="demo1" class="scroll-view-item demo-text-1"></view>
			<view id="demo2" class="scroll-view-item demo-text-2"></view>
			<view id="demo3" class="scroll-view-item demo-text-3"></view>
		</scroll-view>
	</view>
</view>
<!-- 绑定事件结束 -->

<!-- 根据id跳转到对应的位置开始 -->
<view class="page-section">
	<view class="page-section-title">
		<text>片9 测试scroll-into-view滚动</text>
	</view>
	<view class="page-section-spacing">
  <!-- 
    enable-flex :启用 flexbox 布局。
    scroll-with-animation:在设置滚动条位置时使用动画过渡
   -->
		<scroll-view enable-flex scroll-into-view="{{scrollIntoViewId}}" bindscroll="onScroll" scroll-y scroll-x scroll-with-animation="{{false}}" style="width: 100%;height:300rpx;">
			<view id="childview{{item}}0" wx:key="itemRow" wx:for="{{[0, 1, 2, 3, 4, 5,6,7,8,9]}}" class="scroll-row">{{item}}
				<view id="childview{{item}}{{item2}}" wx:key="itemCol" wx:for="{{[0, 1, 2, 3, 4, 5,6,7,8,9]}}" wx:for-item="item2"class="scroll-item"  >
        {{item}}:{{item2}}
        </view>
			</view>
		</scroll-view>
	</view>
	<view class="btn-area">
		<button type="primary" bindtap="scrollToView1">滚动到子组件2</button>
	</view>
</view>
<!-- 根据id跳转到对应的位置结束 -->

<view class="page-section">
	<view class="page-section-title">自定义下拉刷新</view>
	<scroll-view style="width: 100%; height: 400px;overflow-anchor:auto;background:#eee;" bindscroll="onScroll" bindscrolltoupper="onScrolltoupper" scroll-top="{{scrollTopValue}}" scroll-into-view="{{scrollIntoViewId}}" refresher-threshold="{{80}}" refresher-triggered="{{refresherTriggered}}" bindrefresherpulling="{{refresh.onPulling}}" bindrefresherrestore="{{refresh.onRestore}}"  bindrefresherrefresh="{{refresh.onRefresh}}"  bindrefresherabort="{{refresh.onAbort}}" refresher-default-style="none"  refresher-background="#FFF" scroll-y scroll-with-animation enable-back-to-top enable-flex scroll-anchoring refresher-enabled     >
		
    <!-- 一个插槽定义下拉后头部的内容开始 -->
    <view slot="refresher" class="refresh-container" style="display: block; width: 100%; height: 80px; background: #F8f8f8; display: flex; align-items: center;">
			<view class="view1" style="position: absolute; text-align: center; width: 100%;display:flex;align-items:center;justify-content:center;color:#888;">
				<mp-icon id="refresherIcon" icon="arrow" color="#888" size="{{20}}" style="margin-right:5px;transform:rotate(90deg)"></mp-icon>
				<text style="min-width:80px;text-align:left;">{{pullingMessage}}</text>
			</view>
		</view>
    <!-- 一个插槽定义下拉后头部的内容结束 -->


		<view wx:key="scrollCustom" wx:for="{{arr}}" id="view{{item+1}}" style="display: flex;height: 100px;">
			<text style="position:relative;top:5px;left:5px;color:black;">{{item+1}}</text>
			<image src="https://cdn.nlark.com/yuque/0/2020/jpeg/1252071/1586359160786-8d5b7738-3ad3-43e7-bf0a-738c58365645.jpeg"></image>
			<image src="https://cdn.nlark.com/yuque/0/2020/jpeg/1252071/1586359160786-8d5b7738-3ad3-43e7-bf0a-738c58365645.jpeg"></image>
			<image src="https://cdn.nlark.com/yuque/0/2020/jpeg/1252071/1586359160786-8d5b7738-3ad3-43e7-bf0a-738c58365645.jpeg"></image>
			<image src="https://cdn.nlark.com/yuque/0/2020/jpeg/1252071/1586359160786-8d5b7738-3ad3-43e7-bf0a-738c58365645.jpeg"></image>
			<image src="https://cdn.nlark.com/yuque/0/2020/jpeg/1252071/1586359160786-8d5b7738-3ad3-43e7-bf0a-738c58365645.jpeg"></image>
		</view>
	</scroll-view>
	<view class="btn-area">
		<button type="default" bindtap="plusScrollUpValue">向上滚动</button>
		<button type="default" bindtap="scrollToView1">滚动到子视图</button>
		<button type="default" bindtap="unshiftOnePic">顶部添加一张图</button>
	</view>
</view>



<view class="page-section">
	<view class="page-section-title">使用recycle-view扩展组件</view>
<recycle-view height="200" batch="{{batchSetRecycleData}}" id="recycleId" batch-key="batchSetRecycleData" style="background:white;">
	<recycle-item wx:for="{{recycleList}}" wx:key="index" class='item'>
		<view>
			{{item.id}}: {{item.name}}
		</view>
	</recycle-item>
</recycle-view>
</view>




<wxs module="refresh">
	var pullingMessage = "下拉刷新"

	module.exports = {
		onRefresh: function(e, instance) {
			// 此时手拉开了，进入了加载中的状态
			pullingMessage = "更新中"
			console.log(pullingMessage)
			instance.callMethod("setData", {
				pullingMessage: pullingMessage,
				refresherTriggered: true
      })
      //这里调用了js里面的一个方法
			instance.callMethod("willCompleteRefresh", {})
		},
		onAbort: function(e, instance) {
			// 异常状态，例如被事件突然打断，事件包括电话等，被迫松手了
			pullingMessage = "下拉刷新"
			console.log(pullingMessage)
		},
		onRestore: function(e, instance) {
			// 回去了，松手了，恢复原位了，不刷了
			pullingMessage = "下拉刷新"
			console.log(pullingMessage)
		},
		onPulling: function(e, instance) {
			// 80的高度，因为refresher-threshold设置的是80，手指按住往下拉的状态
			var p = Math.min(e.detail.dy / 80, 1)
			// console.log(p)
			// 这里在视图层，不怕频繁操作DOM
			var icon = instance.selectComponent('#refresherIcon')
			icon.setStyle({
				opacity: p,
				transform: "rotate(" + (90 + p * 180) + "deg)"
			})
			var view = instance.selectComponent('.refresh-container')
			view.setStyle({
				opacity: p,
				transform: "scale(" + p + ")"
			})
			if (e.detail.dy >= 80) {
				if (pullingMessage == "下拉刷新") {
					pullingMessage = "释放更新"
					instance.callMethod("setData", {
						pullingMessage
					})
				}
			}
		}
	}
</wxs>